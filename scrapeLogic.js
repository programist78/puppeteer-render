const puppeteer = require("puppeteer");
const fs = require("fs");
require("dotenv").config();

const scrapeLogic = async (res) => {
  const browser = await puppeteer.launch({
    args: [
      "--disable-setuid-sandbox",
      "--no-sandbox",
      "--single-process",
      "--no-zygote",
    ],
    executablePath:
      process.env.NODE_ENV === "production"
        ? process.env.PUPPETEER_EXECUTABLE_PATH
        : puppeteer.executablePath(),
  });

  try {
    const page = await browser.newPage();
    await page.goto("https://developer.chrome.com/");

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —ç–∫—Ä–∞–Ω–∞
    await page.setViewport({ width: 1080, height: 1024 });

    // –í–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –≤ —Å—Ç—Ä–æ–∫—É –ø–æ–∏—Å–∫–∞
    // await page.type(".search-box__input", "automate beyond recorder");

    // // –ñ–¥–µ–º –∏ –∫–ª–∏–∫–∞–µ–º –Ω–∞ –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    // const searchResultSelector = ".search-box__link";
    // await page.waitForSelector(searchResultSelector);
    // await page.click(searchResultSelector);

    // // –û–∂–∏–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    // const textSelector = await page.waitForSelector("text/Customize and automate");
    // const fullTitle = await textSelector.evaluate((el) => el.textContent);

    // console.log(`The title of this blog post is ${fullTitle}`);

    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if (!fs.existsSync("screenshots")) {
      fs.mkdirSync("screenshots");
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
    let screenshotCount = 0;
    const screenshotInterval = setInterval(async () => {
      const timestamp = new Date().toISOString().replace(/[:.]/g, "-");
      const filename = `screenshots/screenshot-${timestamp}.png`;
      await page.screenshot({ path: filename, fullPage: true });
      console.log(`üì∏ Screenshot saved: ${filename}`);

      screenshotCount++;

      // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç—ã —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
      if (screenshotCount >= 10) {
        clearInterval(screenshotInterval);
        console.log("üì∏ Screenshot capturing stopped.");
        await browser.close(); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –ø–æ—Å–ª–µ 10 —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
      }
    }, 1000);

    res.send(`Scraping started. Screenshots will be saved every second.`);
  } catch (e) {
    console.error(e);
    res.send(`Something went wrong while running Puppeteer: ${e}`);
  }
};

module.exports = { scrapeLogic };